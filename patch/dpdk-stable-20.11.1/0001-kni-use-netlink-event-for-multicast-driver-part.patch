From 3e4d6a3bf46f7cd9fb6033241c2a2bc11cebfa46 Mon Sep 17 00:00:00 2001
From: jerrywang <jerrywang@qiyi.com>
Date: Tue, 18 May 2021 17:25:58 +0800
Subject: [PATCH] kni-use-netlink-event-for-multicast-driver-part

---
 kernel/linux/kni/kni_net.c | 51 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 51 insertions(+)

diff --git a/kernel/linux/kni/kni_net.c b/kernel/linux/kni/kni_net.c
index 4b75208..7b85588 100644
--- a/kernel/linux/kni/kni_net.c
+++ b/kernel/linux/kni/kni_net.c
@@ -17,6 +17,8 @@
 #include <linux/skbuff.h>
 #include <linux/kthread.h>
 #include <linux/delay.h>
+#include <linux/inetdevice.h>
+#include <net/netlink.h>
 
 #include <rte_kni_common.h>
 #include <kni_fifo.h>
@@ -781,11 +783,60 @@ void kni_net_release_fifo_phy(struct kni_dev *kni)
 	.cache   = NULL,  /* disable caching */
 };
 
+static size_t
+kni_nlmsg_size(void)
+{
+    return NLMSG_ALIGN(sizeof(struct ifaddrmsg))
+           + nla_total_size(4) /* IFA_ADDRESS */
+           + nla_total_size(4) /* IFA_LOCAL */
+           + nla_total_size(4) /* IFA_BROADCAST */
+           + nla_total_size(IFNAMSIZ) /* IFA_LABEL */
+           + nla_total_size(4) /* IFA_FLAGS */
+           + nla_total_size(sizeof(struct ifa_cacheinfo)); /* IFA_CACHEINFO */
+}
+
+ static void
+ kni_net_set_rx_mode(struct net_device *dev)
+ {
+    struct sk_buff *skb;
+    struct net *net = dev_net(dev);
+    struct nlmsghdr *nlh;
+    struct ifaddrmsg *ifm;
+
+    skb = nlmsg_new(kni_nlmsg_size(), GFP_ATOMIC);
+    if (!skb)
+        return;
+
+    /* no other event for us ? */
+    nlh = nlmsg_put(skb, 0, 0, RTM_NEWADDR, sizeof(*ifm), 0);
+    if (!nlh) {
+        kfree_skb(skb);
+        return;
+    }
+
+    /* just send an notification so no other info */
+    ifm = nlmsg_data(nlh);
+    memset(ifm, 0, sizeof(*ifm));
+    ifm->ifa_family = AF_UNSPEC;
+    ifm->ifa_prefixlen = 0;
+    ifm->ifa_flags = 0;
+    ifm->ifa_scope = RT_SCOPE_NOWHERE;
+    ifm->ifa_index = 0;
+
+    nlmsg_end(skb, nlh);
+
+    /* other group ? */
+    pr_debug("%s: rx-mode/multicast-list changed\n", __func__);
+    rtnl_notify(skb, net, 0, RTNLGRP_NOTIFY, NULL, GFP_ATOMIC);
+    return;
+}
+
 static const struct net_device_ops kni_net_netdev_ops = {
 	.ndo_open = kni_net_open,
 	.ndo_stop = kni_net_release,
 	.ndo_set_config = kni_net_config,
 	.ndo_change_rx_flags = kni_net_change_rx_flags,
+    .ndo_set_rx_mode = kni_net_set_rx_mode,
 	.ndo_start_xmit = kni_net_tx,
 	.ndo_change_mtu = kni_net_change_mtu,
 	.ndo_tx_timeout = kni_net_tx_timeout,
-- 
1.8.3.1

